-   Assets are being linked using their actual filenames. It'll probably be better to use indexes per level 
    to link the assets. Either that or just use mapped IDs.
    -   The main thing with per level indexing is keeping loaded assets between levels and keeping their index

-   Indices may actually be fine, but texture arrays are going to use indexes. Maybe have a map of strings to index?
-   If the string mapping is too slow, the asset manager can just generate indices that the models themselves hold
    or the strings can be hashed at runtime and only store the indices

-   TextureArrays per level can be implemented instead of switching resources every render

-   Sparse Arrays for the ECS is likely necessary to safe on memory and prevent updating unused components
    -   Tracking the active entity indices would be helpful in preventing unecessary updates as well if Sparse Arrays 
        will not be used

-   Removing the template on the EntityManager and Entity may also be beneficial for the sake of program 
    simplicty. Furthermore, a loop is used to determine what components the Entity has, but using Component::ID is simpler

-   Camera needs to collide with world

-   Material system

-   Specular highlights. Cel shading

-   Kuwahara filter

-   Camera interpolation fix

-   Asset building

-   Remove new calls on Game member classes, creat Init functions instead

-	Right now every shader get compiled by the compiler script, need someway to log the last compile time and recompile when necessary
